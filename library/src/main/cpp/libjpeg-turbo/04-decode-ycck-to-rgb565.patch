From 8837187dfa1ffab1c4040f32d01a95b7f4230157 Mon Sep 17 00:00:00 2001
From: seven332 <seven332@163.com>
Date: Mon, 26 Dec 2016 14:59:52 +0800
Subject: [PATCH] Add decoding ycck to rgb565

---
 jdcol565.c | 173 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 jdcolor.c  |  38 ++++++++++++
 2 files changed, 211 insertions(+)

diff --git a/jdcol565.c b/jdcol565.c
index ee60be396..a705e22d6 100644
--- a/jdcol565.c
+++ b/jdcol565.c
@@ -507,3 +507,176 @@ cmyk_rgb565D_convert_internal (j_decompress_ptr cinfo,
     }
   }
 }
+
+
+INLINE
+LOCAL(void)
+ycck_rgb565_convert_internal (j_decompress_ptr cinfo,
+                              JSAMPIMAGE input_buf, JDIMENSION input_row,
+                              JSAMPARRAY output_buf, int num_rows)
+{
+  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
+  register int y, cb, cr, k;
+  register JSAMPROW outptr;
+  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
+  register JDIMENSION col;
+  JDIMENSION num_cols = cinfo->output_width;
+  /* copy these pointers into registers if possible */
+  register JSAMPLE * range_limit = cinfo->sample_range_limit;
+  register int * Crrtab = cconvert->Cr_r_tab;
+  register int * Cbbtab = cconvert->Cb_b_tab;
+  register JLONG * Crgtab = cconvert->Cr_g_tab;
+  register JLONG * Cbgtab = cconvert->Cb_g_tab;
+  SHIFT_TEMPS
+
+  while (--num_rows >= 0) {
+    JLONG rgb;
+    unsigned int r, g, b;
+    inptr0 = input_buf[0][input_row];
+    inptr1 = input_buf[1][input_row];
+    inptr2 = input_buf[2][input_row];
+    inptr3 = input_buf[3][input_row];
+    input_row++;
+    outptr = *output_buf++;
+
+    if (PACK_NEED_ALIGNMENT(outptr)) {
+      y  = GETJSAMPLE(*inptr0++);
+      cb = GETJSAMPLE(*inptr1++);
+      cr = GETJSAMPLE(*inptr2++);
+      k  = GETJSAMPLE(*inptr3++);
+      r = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];
+      g = range_limit[MAXJSAMPLE - (y +
+              ((int)RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS)))];
+      b = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];
+      rgb = PACK_SHORT_565(r * k / MAXJSAMPLE, g * k / MAXJSAMPLE, b * k / MAXJSAMPLE);
+      *(INT16*)outptr = (INT16)rgb;
+      outptr += 2;
+      num_cols--;
+    }
+    for (col = 0; col < (num_cols >> 1); col++) {
+      y  = GETJSAMPLE(*inptr0++);
+      cb = GETJSAMPLE(*inptr1++);
+      cr = GETJSAMPLE(*inptr2++);
+      k  = GETJSAMPLE(*inptr3++);
+      r = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];
+      g = range_limit[MAXJSAMPLE - (y +
+              ((int)RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS)))];
+      b = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];
+      rgb = PACK_SHORT_565(r * k / MAXJSAMPLE, g * k / MAXJSAMPLE, b * k / MAXJSAMPLE);
+
+      y  = GETJSAMPLE(*inptr0++);
+      cb = GETJSAMPLE(*inptr1++);
+      cr = GETJSAMPLE(*inptr2++);
+      k  = GETJSAMPLE(*inptr3++);
+      r = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];
+      g = range_limit[MAXJSAMPLE - (y +
+              ((int)RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS)))];
+      b = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];
+      rgb = PACK_TWO_PIXELS(rgb,
+                PACK_SHORT_565(r * k / MAXJSAMPLE, g * k / MAXJSAMPLE, b * k / MAXJSAMPLE));
+
+      WRITE_TWO_ALIGNED_PIXELS(outptr, rgb);
+      outptr += 4;
+    }
+    if (num_cols & 1) {
+      y  = GETJSAMPLE(*inptr0);
+      cb = GETJSAMPLE(*inptr1);
+      cr = GETJSAMPLE(*inptr2);
+      k  = GETJSAMPLE(*inptr3++);
+      r = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];
+      g = range_limit[MAXJSAMPLE - (y +
+              ((int)RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS)))];
+      b = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];
+      rgb = PACK_SHORT_565(r * k / MAXJSAMPLE, g * k / MAXJSAMPLE, b * k / MAXJSAMPLE);
+      *(INT16*)outptr = (INT16)rgb;
+    }
+  }
+}
+
+
+INLINE
+LOCAL(void)
+ycck_rgb565D_convert_internal (j_decompress_ptr cinfo,
+                               JSAMPIMAGE input_buf, JDIMENSION input_row,
+                               JSAMPARRAY output_buf, int num_rows)
+{
+  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
+  register int y, cb, cr, k;
+  register JSAMPROW outptr;
+  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
+  register JDIMENSION col;
+  JDIMENSION num_cols = cinfo->output_width;
+  /* copy these pointers into registers if possible */
+  register JSAMPLE * range_limit = cinfo->sample_range_limit;
+  register int * Crrtab = cconvert->Cr_r_tab;
+  register int * Cbbtab = cconvert->Cb_b_tab;
+  register JLONG * Crgtab = cconvert->Cr_g_tab;
+  register JLONG * Cbgtab = cconvert->Cb_g_tab;
+  JLONG d0 = dither_matrix[cinfo->output_scanline & DITHER_MASK];
+  SHIFT_TEMPS
+
+  while (--num_rows >= 0) {
+    JLONG rgb;
+    unsigned int r, g, b;
+
+    inptr0 = input_buf[0][input_row];
+    inptr1 = input_buf[1][input_row];
+    inptr2 = input_buf[2][input_row];
+    inptr3 = input_buf[3][input_row];
+    input_row++;
+    outptr = *output_buf++;
+    if (PACK_NEED_ALIGNMENT(outptr)) {
+      y  = GETJSAMPLE(*inptr0++);
+      cb = GETJSAMPLE(*inptr1++);
+      cr = GETJSAMPLE(*inptr2++);
+      k  = GETJSAMPLE(*inptr3++);
+      r = range_limit[MAXJSAMPLE - DITHER_565_R(y + Crrtab[cr], d0)];
+      g = range_limit[MAXJSAMPLE - DITHER_565_G(y +
+              ((int)RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS)), d0)];
+      b = range_limit[MAXJSAMPLE - DITHER_565_B(y + Cbbtab[cb], d0)];
+      rgb = PACK_SHORT_565(r * k / MAXJSAMPLE, g * k / MAXJSAMPLE, b * k / MAXJSAMPLE);
+      *(INT16*)outptr = (INT16)rgb;
+      outptr += 2;
+      num_cols--;
+    }
+    for (col = 0; col < (num_cols >> 1); col++) {
+      y  = GETJSAMPLE(*inptr0++);
+      cb = GETJSAMPLE(*inptr1++);
+      cr = GETJSAMPLE(*inptr2++);
+      k  = GETJSAMPLE(*inptr3++);
+      r = range_limit[MAXJSAMPLE - DITHER_565_R(y + Crrtab[cr], d0)];
+      g = range_limit[MAXJSAMPLE - DITHER_565_G(y +
+              ((int)RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS)), d0)];
+      b = range_limit[MAXJSAMPLE - DITHER_565_B(y + Cbbtab[cb], d0)];
+      d0 = DITHER_ROTATE(d0);
+      rgb = PACK_SHORT_565(r * k / MAXJSAMPLE, g * k / MAXJSAMPLE, b * k / MAXJSAMPLE);
+
+      y  = GETJSAMPLE(*inptr0++);
+      cb = GETJSAMPLE(*inptr1++);
+      cr = GETJSAMPLE(*inptr2++);
+      k  = GETJSAMPLE(*inptr3++);
+      r = range_limit[MAXJSAMPLE - DITHER_565_R(y + Crrtab[cr], d0)];
+      g = range_limit[MAXJSAMPLE - DITHER_565_G(y +
+              ((int)RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS)), d0)];
+      b = range_limit[MAXJSAMPLE - DITHER_565_B(y + Cbbtab[cb], d0)];
+      d0 = DITHER_ROTATE(d0);
+      rgb = PACK_TWO_PIXELS(rgb,
+                PACK_SHORT_565(r * k / MAXJSAMPLE, g * k / MAXJSAMPLE, b * k / MAXJSAMPLE));
+
+      WRITE_TWO_ALIGNED_PIXELS(outptr, rgb);
+      outptr += 4;
+    }
+    if (num_cols & 1) {
+      y  = GETJSAMPLE(*inptr0);
+      cb = GETJSAMPLE(*inptr1);
+      cr = GETJSAMPLE(*inptr2);
+      k  = GETJSAMPLE(*inptr3++);
+      r = range_limit[MAXJSAMPLE - DITHER_565_R(y + Crrtab[cr], d0)];
+      g = range_limit[MAXJSAMPLE - DITHER_565_G(y +
+              ((int)RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS)), d0)];
+      b = range_limit[MAXJSAMPLE - DITHER_565_B(y + Cbbtab[cb], d0)];
+      rgb = PACK_SHORT_565(r * k / MAXJSAMPLE, g * k / MAXJSAMPLE, b * k / MAXJSAMPLE);
+      *(INT16*)outptr = (INT16)rgb;
+    }
+  }
+}
diff --git a/jdcolor.c b/jdcolor.c
index d5460ee75..db785a74e 100644
--- a/jdcolor.c
+++ b/jdcolor.c
@@ -750,6 +750,8 @@ static INLINE boolean is_big_endian(void)
 #define gray_rgb565D_convert_internal  gray_rgb565D_convert_le
 #define cmyk_rgb565_convert_internal  cmyk_rgb565_convert_le
 #define cmyk_rgb565D_convert_internal  cmyk_rgb565D_convert_le
+#define ycck_rgb565_convert_internal  ycck_rgb565_convert_le
+#define ycck_rgb565D_convert_internal  ycck_rgb565D_convert_le
 #include "jdcol565.c"
 #undef PACK_SHORT_565
 #undef PACK_TWO_PIXELS
@@ -761,6 +763,8 @@ static INLINE boolean is_big_endian(void)
 #undef gray_rgb565D_convert_internal
 #undef cmyk_rgb565_convert_internal
 #undef cmyk_rgb565D_convert_internal
+#undef ycck_rgb565_convert_internal
+#undef ycck_rgb565D_convert_internal
 
 #define PACK_SHORT_565  PACK_SHORT_565_BE
 #define PACK_TWO_PIXELS  PACK_TWO_PIXELS_BE
@@ -772,6 +776,8 @@ static INLINE boolean is_big_endian(void)
 #define gray_rgb565D_convert_internal  gray_rgb565D_convert_be
 #define cmyk_rgb565_convert_internal  cmyk_rgb565_convert_be
 #define cmyk_rgb565D_convert_internal  cmyk_rgb565D_convert_be
+#define ycck_rgb565_convert_internal  ycck_rgb565_convert_be
+#define ycck_rgb565D_convert_internal  ycck_rgb565D_convert_be
 #include "jdcol565.c"
 #undef PACK_SHORT_565
 #undef PACK_TWO_PIXELS
@@ -783,6 +789,8 @@ static INLINE boolean is_big_endian(void)
 #undef gray_rgb565D_convert_internal
 #undef cmyk_rgb565_convert_internal
 #undef cmyk_rgb565D_convert_internal
+#undef ycck_rgb565_convert_internal
+#undef ycck_rgb565D_convert_internal
 
 
 METHODDEF(void)
@@ -881,6 +889,30 @@ cmyk_rgb565D_convert (j_decompress_ptr cinfo,
 }
 
 
+METHODDEF(void)
+ycck_rgb565_convert (j_decompress_ptr cinfo,
+                     JSAMPIMAGE input_buf, JDIMENSION input_row,
+                     JSAMPARRAY output_buf, int num_rows)
+{
+  if (is_big_endian())
+    ycck_rgb565_convert_be(cinfo, input_buf, input_row, output_buf, num_rows);
+  else
+    ycck_rgb565_convert_le(cinfo, input_buf, input_row, output_buf, num_rows);
+}
+
+
+METHODDEF(void)
+ycck_rgb565D_convert (j_decompress_ptr cinfo,
+                      JSAMPIMAGE input_buf, JDIMENSION input_row,
+                      JSAMPARRAY output_buf, int num_rows)
+{
+  if (is_big_endian())
+    ycck_rgb565D_convert_be(cinfo, input_buf, input_row, output_buf, num_rows);
+  else
+    ycck_rgb565D_convert_le(cinfo, input_buf, input_row, output_buf, num_rows);
+}
+
+
 /*
  * Empty method for start_pass.
  */
@@ -1008,6 +1040,9 @@ jinit_color_deconverter (j_decompress_ptr cinfo)
         cconvert->pub.color_convert = rgb_rgb565_convert;
       } else if (cinfo->jpeg_color_space == JCS_CMYK) {
         cconvert->pub.color_convert = cmyk_rgb565_convert;
+      } else if (cinfo->jpeg_color_space == JCS_YCCK) {
+        cconvert->pub.color_convert = ycck_rgb565_convert;
+        build_ycc_rgb_table(cinfo);
       } else
         ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
     } else {
@@ -1021,6 +1056,9 @@ jinit_color_deconverter (j_decompress_ptr cinfo)
         cconvert->pub.color_convert = rgb_rgb565D_convert;
       } else if (cinfo->jpeg_color_space == JCS_CMYK) {
         cconvert->pub.color_convert = cmyk_rgb565D_convert;
+      } else if (cinfo->jpeg_color_space == JCS_YCCK) {
+        cconvert->pub.color_convert = ycck_rgb565D_convert;
+        build_ycc_rgb_table(cinfo);
       } else
         ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
     }
