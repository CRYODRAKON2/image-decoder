From c64c1650173b25184ff27d3fb27b05cc7cfefa60 Mon Sep 17 00:00:00 2001
From: seven332 <seven332@163.com>
Date: Mon, 26 Dec 2016 00:09:26 +0800
Subject: [PATCH] Add decoding ycck to rgb

---
 jdcolext.c | 57 ++++++++++++++++++++++++++++++++++++++++++++++++++
 jdcolor.c  | 61 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 118 insertions(+)

diff --git a/jdcolext.c b/jdcolext.c
index 6a38d2ab0..49b3c1bb7 100644
--- a/jdcolext.c
+++ b/jdcolext.c
@@ -180,3 +180,60 @@ cmyk_rgb_convert_internal (j_decompress_ptr cinfo,
     }
   }
 }
+
+
+/*
+ * Convert YCCK to extended RGB
+ */
+
+INLINE
+LOCAL(void)
+ycck_rgb_convert_internal (j_decompress_ptr cinfo,
+                           JSAMPIMAGE input_buf, JDIMENSION input_row,
+                           JSAMPARRAY output_buf, int num_rows)
+{
+  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
+  register int y, cb, cr, k;
+  register int r, g, b;
+  register JSAMPROW outptr;
+  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
+  register JDIMENSION col;
+  JDIMENSION num_cols = cinfo->output_width;
+  /* copy these pointers into registers if possible */
+  register JSAMPLE * range_limit = cinfo->sample_range_limit;
+  register int * Crrtab = cconvert->Cr_r_tab;
+  register int * Cbbtab = cconvert->Cb_b_tab;
+  register JLONG * Crgtab = cconvert->Cr_g_tab;
+  register JLONG * Cbgtab = cconvert->Cb_g_tab;
+  SHIFT_TEMPS
+
+  while (--num_rows >= 0) {
+    inptr0 = input_buf[0][input_row];
+    inptr1 = input_buf[1][input_row];
+    inptr2 = input_buf[2][input_row];
+    inptr3 = input_buf[3][input_row];
+    input_row++;
+    outptr = *output_buf++;
+    for (col = 0; col < num_cols; col++) {
+      y  = GETJSAMPLE(inptr0[col]);
+      cb = GETJSAMPLE(inptr1[col]);
+      cr = GETJSAMPLE(inptr2[col]);
+      k  = GETJSAMPLE(inptr3[col]);
+      /* Range-limiting is essential due to noise introduced by DCT losses. */
+      r = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];
+      g = range_limit[MAXJSAMPLE - (y +
+              ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS)))];
+      b = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];
+      /* Apply K */
+      outptr[RGB_RED]   = (JSAMPLE) (r * k / MAXJSAMPLE);
+      outptr[RGB_GREEN] = (JSAMPLE) (g * k / MAXJSAMPLE);
+      outptr[RGB_BLUE]  = (JSAMPLE) (b * k / MAXJSAMPLE);
+      /* Set unused byte to 0xFF so it can be interpreted as an opaque */
+      /* alpha channel value */
+#ifdef RGB_ALPHA
+      outptr[RGB_ALPHA] = 0xFF;
+#endif
+      outptr += RGB_PIXELSIZE;
+    }
+  }
+}
diff --git a/jdcolor.c b/jdcolor.c
index 5f22715a9..159f816eb 100644
--- a/jdcolor.c
+++ b/jdcolor.c
@@ -106,6 +106,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #define gray_rgb_convert_internal  gray_extrgb_convert_internal
 #define rgb_rgb_convert_internal  rgb_extrgb_convert_internal
 #define cmyk_rgb_convert_internal  cmyk_extrgb_convert_internal
+#define ycck_rgb_convert_internal  ycck_extrgb_convert_internal
 #include "jdcolext.c"
 #undef RGB_RED
 #undef RGB_GREEN
@@ -115,6 +116,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #undef gray_rgb_convert_internal
 #undef rgb_rgb_convert_internal
 #undef cmyk_rgb_convert_internal
+#undef ycck_rgb_convert_internal
 
 #define RGB_RED  EXT_RGBX_RED
 #define RGB_GREEN  EXT_RGBX_GREEN
@@ -125,6 +127,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #define gray_rgb_convert_internal  gray_extrgbx_convert_internal
 #define rgb_rgb_convert_internal  rgb_extrgbx_convert_internal
 #define cmyk_rgb_convert_internal  cmyk_extrgbx_convert_internal
+#define ycck_rgb_convert_internal  ycck_extrgbx_convert_internal
 #include "jdcolext.c"
 #undef RGB_RED
 #undef RGB_GREEN
@@ -135,6 +138,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #undef gray_rgb_convert_internal
 #undef rgb_rgb_convert_internal
 #undef cmyk_rgb_convert_internal
+#undef ycck_rgb_convert_internal
 
 #define RGB_RED  EXT_BGR_RED
 #define RGB_GREEN  EXT_BGR_GREEN
@@ -144,6 +148,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #define gray_rgb_convert_internal  gray_extbgr_convert_internal
 #define rgb_rgb_convert_internal  rgb_extbgr_convert_internal
 #define cmyk_rgb_convert_internal  cmyk_extbgr_convert_internal
+#define ycck_rgb_convert_internal  ycck_extbgr_convert_internal
 #include "jdcolext.c"
 #undef RGB_RED
 #undef RGB_GREEN
@@ -153,6 +158,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #undef gray_rgb_convert_internal
 #undef rgb_rgb_convert_internal
 #undef cmyk_rgb_convert_internal
+#undef ycck_rgb_convert_internal
 
 #define RGB_RED  EXT_BGRX_RED
 #define RGB_GREEN  EXT_BGRX_GREEN
@@ -163,6 +169,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #define gray_rgb_convert_internal  gray_extbgrx_convert_internal
 #define rgb_rgb_convert_internal  rgb_extbgrx_convert_internal
 #define cmyk_rgb_convert_internal  cmyk_extbgrx_convert_internal
+#define ycck_rgb_convert_internal  ycck_extbgrx_convert_internal
 #include "jdcolext.c"
 #undef RGB_RED
 #undef RGB_GREEN
@@ -173,6 +180,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #undef gray_rgb_convert_internal
 #undef rgb_rgb_convert_internal
 #undef cmyk_rgb_convert_internal
+#undef ycck_rgb_convert_internal
 
 #define RGB_RED  EXT_XBGR_RED
 #define RGB_GREEN  EXT_XBGR_GREEN
@@ -183,6 +191,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #define gray_rgb_convert_internal  gray_extxbgr_convert_internal
 #define rgb_rgb_convert_internal  rgb_extxbgr_convert_internal
 #define cmyk_rgb_convert_internal  cmyk_extxbgr_convert_internal
+#define ycck_rgb_convert_internal  ycck_extxbgr_convert_internal
 #include "jdcolext.c"
 #undef RGB_RED
 #undef RGB_GREEN
@@ -193,6 +202,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #undef gray_rgb_convert_internal
 #undef rgb_rgb_convert_internal
 #undef cmyk_rgb_convert_internal
+#undef ycck_rgb_convert_internal
 
 #define RGB_RED  EXT_XRGB_RED
 #define RGB_GREEN  EXT_XRGB_GREEN
@@ -203,6 +213,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #define gray_rgb_convert_internal  gray_extxrgb_convert_internal
 #define rgb_rgb_convert_internal  rgb_extxrgb_convert_internal
 #define cmyk_rgb_convert_internal  cmyk_extxrgb_convert_internal
+#define ycck_rgb_convert_internal  ycck_extxrgb_convert_internal
 #include "jdcolext.c"
 #undef RGB_RED
 #undef RGB_GREEN
@@ -213,6 +224,7 @@ typedef my_color_deconverter *my_cconvert_ptr;
 #undef gray_rgb_convert_internal
 #undef rgb_rgb_convert_internal
 #undef cmyk_rgb_convert_internal
+#undef ycck_rgb_convert_internal
 
 
 /*
@@ -582,6 +594,52 @@ cmyk_rgb_convert (j_decompress_ptr cinfo,
 }
 
 
+/*
+ * Convert YCCK to RGB
+ */
+
+METHODDEF(void)
+ycck_rgb_convert (j_decompress_ptr cinfo,
+                  JSAMPIMAGE input_buf, JDIMENSION input_row,
+                  JSAMPARRAY output_buf, int num_rows)
+{
+  switch (cinfo->out_color_space) {
+    case JCS_EXT_RGB:
+      ycck_extrgb_convert_internal(cinfo, input_buf, input_row, output_buf,
+                                   num_rows);
+          break;
+    case JCS_EXT_RGBX:
+    case JCS_EXT_RGBA:
+      ycck_extrgbx_convert_internal(cinfo, input_buf, input_row, output_buf,
+                                    num_rows);
+          break;
+    case JCS_EXT_BGR:
+      ycck_extbgr_convert_internal(cinfo, input_buf, input_row, output_buf,
+                                   num_rows);
+          break;
+    case JCS_EXT_BGRX:
+    case JCS_EXT_BGRA:
+      ycck_extbgrx_convert_internal(cinfo, input_buf, input_row, output_buf,
+                                    num_rows);
+          break;
+    case JCS_EXT_XBGR:
+    case JCS_EXT_ABGR:
+      ycck_extxbgr_convert_internal(cinfo, input_buf, input_row, output_buf,
+                                    num_rows);
+          break;
+    case JCS_EXT_XRGB:
+    case JCS_EXT_ARGB:
+      ycck_extxrgb_convert_internal(cinfo, input_buf, input_row, output_buf,
+                                    num_rows);
+          break;
+    default:
+      ycck_rgb_convert_internal(cinfo, input_buf, input_row, output_buf,
+                                num_rows);
+          break;
+  }
+}
+
+
 /*
  * Adobe-style YCCK->CMYK conversion.
  * We convert YCbCr to R=1-C, G=1-M, and B=1-Y using the same
@@ -895,6 +953,9 @@ jinit_color_deconverter (j_decompress_ptr cinfo)
         cconvert->pub.color_convert = rgb_rgb_convert;
     } else if (cinfo->jpeg_color_space == JCS_CMYK) {
       cconvert->pub.color_convert = cmyk_rgb_convert;
+    } else if (cinfo->jpeg_color_space == JCS_YCCK) {
+      cconvert->pub.color_convert = ycck_rgb_convert;
+      build_ycc_rgb_table(cinfo);
     } else
       ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
     break;
