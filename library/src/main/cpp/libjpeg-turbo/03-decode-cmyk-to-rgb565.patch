From 5cecdf37f8fba9fabd91532b69d184dd0977a923 Mon Sep 17 00:00:00 2001
From: seven332 <seven332@163.com>
Date: Mon, 26 Dec 2016 14:18:07 +0800
Subject: [PATCH] Add decoding cmyk to rgb565

---
 jdcol565.c | 125 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 jdcolor.c  |  36 +++++++++++++++
 2 files changed, 161 insertions(+)

diff --git a/jdcol565.c b/jdcol565.c
index 349fce4a6..ee60be396 100644
--- a/jdcol565.c
+++ b/jdcol565.c
@@ -382,3 +382,128 @@ gray_rgb565D_convert_internal (j_decompress_ptr cinfo,
     }
   }
 }
+
+
+INLINE
+LOCAL(void)
+cmyk_rgb565_convert_internal (j_decompress_ptr cinfo,
+                              JSAMPIMAGE input_buf, JDIMENSION input_row,
+                              JSAMPARRAY output_buf, int num_rows)
+{
+  register int k;
+  register JSAMPROW outptr;
+  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
+  register JDIMENSION col;
+  JDIMENSION num_cols = cinfo->output_width;
+
+  while (--num_rows >= 0) {
+    JLONG rgb;
+    unsigned int r, g, b;
+    inptr0 = input_buf[0][input_row];
+    inptr1 = input_buf[1][input_row];
+    inptr2 = input_buf[2][input_row];
+    inptr3 = input_buf[3][input_row];
+    input_row++;
+    outptr = *output_buf++;
+
+    if (PACK_NEED_ALIGNMENT(outptr)) {
+      k = GETJSAMPLE(*inptr3++);
+      r = (JSAMPLE) (GETJSAMPLE(*inptr0++) * k / MAXJSAMPLE);
+      g = (JSAMPLE) (GETJSAMPLE(*inptr1++) * k / MAXJSAMPLE);
+      b = (JSAMPLE) (GETJSAMPLE(*inptr2++) * k / MAXJSAMPLE);
+      rgb = PACK_SHORT_565(r, g, b);
+      *(INT16*)outptr = (INT16)rgb;
+      outptr += 2;
+      num_cols--;
+    }
+    for (col = 0; col < (num_cols >> 1); col++) {
+      k = GETJSAMPLE(*inptr3++);
+      r = (JSAMPLE) (GETJSAMPLE(*inptr0++) * k / MAXJSAMPLE);
+      g = (JSAMPLE) (GETJSAMPLE(*inptr1++) * k / MAXJSAMPLE);
+      b = (JSAMPLE) (GETJSAMPLE(*inptr2++) * k / MAXJSAMPLE);
+      rgb = PACK_SHORT_565(r, g, b);
+
+      k = GETJSAMPLE(*inptr3++);
+      r = (JSAMPLE) (GETJSAMPLE(*inptr0++) * k / MAXJSAMPLE);
+      g = (JSAMPLE) (GETJSAMPLE(*inptr1++) * k / MAXJSAMPLE);
+      b = (JSAMPLE) (GETJSAMPLE(*inptr2++) * k / MAXJSAMPLE);
+      rgb = PACK_TWO_PIXELS(rgb, PACK_SHORT_565(r, g, b));
+
+      WRITE_TWO_ALIGNED_PIXELS(outptr, rgb);
+      outptr += 4;
+    }
+    if (num_cols & 1) {
+      k = GETJSAMPLE(*inptr3++);
+      r = (JSAMPLE) (GETJSAMPLE(*inptr0++) * k / MAXJSAMPLE);
+      g = (JSAMPLE) (GETJSAMPLE(*inptr1++) * k / MAXJSAMPLE);
+      b = (JSAMPLE) (GETJSAMPLE(*inptr2++) * k / MAXJSAMPLE);
+      rgb = PACK_SHORT_565(r, g, b);
+      *(INT16*)outptr = (INT16)rgb;
+    }
+  }
+}
+
+
+INLINE
+LOCAL(void)
+cmyk_rgb565D_convert_internal (j_decompress_ptr cinfo,
+                               JSAMPIMAGE input_buf, JDIMENSION input_row,
+                               JSAMPARRAY output_buf, int num_rows)
+{
+  register int k;
+  register JSAMPROW outptr;
+  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
+  register JDIMENSION col;
+  register JSAMPLE * range_limit = cinfo->sample_range_limit;
+  JDIMENSION num_cols = cinfo->output_width;
+  JLONG d0 = dither_matrix[cinfo->output_scanline & DITHER_MASK];
+  SHIFT_TEMPS
+
+  while (--num_rows >= 0) {
+    JLONG rgb;
+    unsigned int r, g, b;
+    inptr0 = input_buf[0][input_row];
+    inptr1 = input_buf[1][input_row];
+    inptr2 = input_buf[2][input_row];
+    inptr3 = input_buf[3][input_row];
+    input_row++;
+    outptr = *output_buf++;
+
+    if (PACK_NEED_ALIGNMENT(outptr)) {
+      k = GETJSAMPLE(*inptr3++);
+      r = range_limit[DITHER_565_R((JSAMPLE) (GETJSAMPLE(*inptr0++) * k / MAXJSAMPLE), d0)];
+      g = range_limit[DITHER_565_G((JSAMPLE) (GETJSAMPLE(*inptr1++) * k / MAXJSAMPLE), d0)];
+      b = range_limit[DITHER_565_B((JSAMPLE) (GETJSAMPLE(*inptr2++) * k / MAXJSAMPLE), d0)];
+      rgb = PACK_SHORT_565(r, g, b);
+      *(INT16*)outptr = (INT16)rgb;
+      outptr += 2;
+      num_cols--;
+    }
+    for (col = 0; col < (num_cols >> 1); col++) {
+      k = GETJSAMPLE(*inptr3++);
+      r = range_limit[DITHER_565_R((JSAMPLE) (GETJSAMPLE(*inptr0++) * k / MAXJSAMPLE), d0)];
+      g = range_limit[DITHER_565_G((JSAMPLE) (GETJSAMPLE(*inptr1++) * k / MAXJSAMPLE), d0)];
+      b = range_limit[DITHER_565_B((JSAMPLE) (GETJSAMPLE(*inptr2++) * k / MAXJSAMPLE), d0)];
+      d0 = DITHER_ROTATE(d0);
+      rgb = PACK_SHORT_565(r, g, b);
+
+      k = GETJSAMPLE(*inptr3++);
+      r = range_limit[DITHER_565_R((JSAMPLE) (GETJSAMPLE(*inptr0++) * k / MAXJSAMPLE), d0)];
+      g = range_limit[DITHER_565_G((JSAMPLE) (GETJSAMPLE(*inptr1++) * k / MAXJSAMPLE), d0)];
+      b = range_limit[DITHER_565_B((JSAMPLE) (GETJSAMPLE(*inptr2++) * k / MAXJSAMPLE), d0)];
+      d0 = DITHER_ROTATE(d0);
+      rgb = PACK_TWO_PIXELS(rgb, PACK_SHORT_565(r, g, b));
+
+      WRITE_TWO_ALIGNED_PIXELS(outptr, rgb);
+      outptr += 4;
+    }
+    if (num_cols & 1) {
+      k = GETJSAMPLE(*inptr3++);
+      r = range_limit[DITHER_565_R((JSAMPLE) (GETJSAMPLE(*inptr0++) * k / MAXJSAMPLE), d0)];
+      g = range_limit[DITHER_565_G((JSAMPLE) (GETJSAMPLE(*inptr1++) * k / MAXJSAMPLE), d0)];
+      b = range_limit[DITHER_565_B((JSAMPLE) (GETJSAMPLE(*inptr2++) * k / MAXJSAMPLE), d0)];
+      rgb = PACK_SHORT_565(r, g, b);
+      *(INT16*)outptr = (INT16)rgb;
+    }
+  }
+}
diff --git a/jdcolor.c b/jdcolor.c
index 159f816eb..d5460ee75 100644
--- a/jdcolor.c
+++ b/jdcolor.c
@@ -748,6 +748,8 @@ static INLINE boolean is_big_endian(void)
 #define rgb_rgb565D_convert_internal  rgb_rgb565D_convert_le
 #define gray_rgb565_convert_internal  gray_rgb565_convert_le
 #define gray_rgb565D_convert_internal  gray_rgb565D_convert_le
+#define cmyk_rgb565_convert_internal  cmyk_rgb565_convert_le
+#define cmyk_rgb565D_convert_internal  cmyk_rgb565D_convert_le
 #include "jdcol565.c"
 #undef PACK_SHORT_565
 #undef PACK_TWO_PIXELS
@@ -757,6 +759,8 @@ static INLINE boolean is_big_endian(void)
 #undef rgb_rgb565D_convert_internal
 #undef gray_rgb565_convert_internal
 #undef gray_rgb565D_convert_internal
+#undef cmyk_rgb565_convert_internal
+#undef cmyk_rgb565D_convert_internal
 
 #define PACK_SHORT_565  PACK_SHORT_565_BE
 #define PACK_TWO_PIXELS  PACK_TWO_PIXELS_BE
@@ -766,6 +770,8 @@ static INLINE boolean is_big_endian(void)
 #define rgb_rgb565D_convert_internal  rgb_rgb565D_convert_be
 #define gray_rgb565_convert_internal  gray_rgb565_convert_be
 #define gray_rgb565D_convert_internal  gray_rgb565D_convert_be
+#define cmyk_rgb565_convert_internal  cmyk_rgb565_convert_be
+#define cmyk_rgb565D_convert_internal  cmyk_rgb565D_convert_be
 #include "jdcol565.c"
 #undef PACK_SHORT_565
 #undef PACK_TWO_PIXELS
@@ -775,6 +781,8 @@ static INLINE boolean is_big_endian(void)
 #undef rgb_rgb565D_convert_internal
 #undef gray_rgb565_convert_internal
 #undef gray_rgb565D_convert_internal
+#undef cmyk_rgb565_convert_internal
+#undef cmyk_rgb565D_convert_internal
 
 
 METHODDEF(void)
@@ -849,6 +857,30 @@ gray_rgb565D_convert (j_decompress_ptr cinfo,
 }
 
 
+METHODDEF(void)
+cmyk_rgb565_convert (j_decompress_ptr cinfo,
+                     JSAMPIMAGE input_buf, JDIMENSION input_row,
+                     JSAMPARRAY output_buf, int num_rows)
+{
+  if (is_big_endian())
+    cmyk_rgb565_convert_be(cinfo, input_buf, input_row, output_buf, num_rows);
+  else
+    cmyk_rgb565_convert_le(cinfo, input_buf, input_row, output_buf, num_rows);
+}
+
+
+METHODDEF(void)
+cmyk_rgb565D_convert (j_decompress_ptr cinfo,
+                      JSAMPIMAGE input_buf, JDIMENSION input_row,
+                      JSAMPARRAY output_buf, int num_rows)
+{
+  if (is_big_endian())
+    cmyk_rgb565D_convert_be(cinfo, input_buf, input_row, output_buf, num_rows);
+  else
+    cmyk_rgb565D_convert_le(cinfo, input_buf, input_row, output_buf, num_rows);
+}
+
+
 /*
  * Empty method for start_pass.
  */
@@ -974,6 +1006,8 @@ jinit_color_deconverter (j_decompress_ptr cinfo)
         cconvert->pub.color_convert = gray_rgb565_convert;
       } else if (cinfo->jpeg_color_space == JCS_RGB) {
         cconvert->pub.color_convert = rgb_rgb565_convert;
+      } else if (cinfo->jpeg_color_space == JCS_CMYK) {
+        cconvert->pub.color_convert = cmyk_rgb565_convert;
       } else
         ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
     } else {
@@ -985,6 +1019,8 @@ jinit_color_deconverter (j_decompress_ptr cinfo)
         cconvert->pub.color_convert = gray_rgb565D_convert;
       } else if (cinfo->jpeg_color_space == JCS_RGB) {
         cconvert->pub.color_convert = rgb_rgb565D_convert;
+      } else if (cinfo->jpeg_color_space == JCS_CMYK) {
+        cconvert->pub.color_convert = cmyk_rgb565D_convert;
       } else
         ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
     }
